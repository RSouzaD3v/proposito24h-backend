generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  WRITER
  READER
}
enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatar    String?  // Imagem do perfil
  bio String?
  password  String
  role      Role     @default(READER) // Writer e Reader tem as mesmas permissões.   
  status    Status   @default(ACTIVE)
  lastAccess DateTime?
  interest String[] // Orações, Estudos, Superação...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dailySequences DailySequence[]
  books Book[]
  readPlans ReadPlan[]
  insightsRead InsightsRead[]
  proofPurchases ProofPurchase[]

  @@index([role])
}

model DailySequence {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  diariesRead DailyRead[]
  recordSequence Int
}
model DailyRead {
  id String @id @default(uuid())
  date DateTime
  dailySequenceId String
  dailySequence DailySequence @relation(fields: [dailySequenceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}
enum Mode {
  PUBLISHED
  SKETCH
}
model Book {
  id String @id @default(uuid())
  title String
  description String
  verseGuide String?
  coverImage String // Imagem de capa
  userId String // Author
  user User @relation(fields: [userId], references: [id])
  authorName String
  bookPrice Float
  category String
  tags String[]
  readingTime Int
  difficultyLevel DifficultyLevel @default(EASY)
  mode Mode @default(SKETCH)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pages Page[]
  quizzes Quiz[]
  readingSchedule ReadingSchedule[]
  proofPurchases ProofPurchase[]
}
model Page {
  id String @id @default(uuid())
  title String
  introText String?
  mainVerse String?
  textVerse String?
  verseGuide String?
  referenceDay Int // Dia 01, Dia 02, Dia 03...
  contentMain String
  practicalApplication String
  prayer String
  pageOrder Int // Número da página para fazer a ordem de exibição

  bookId String
  book Book @relation(fields: [bookId], references: [id])
}

model Quiz {
  id String @id @default(uuid())
  title String
  description String
  bookId String
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  questions Question[]
}
model Question {
  id String @id @default(uuid())
  question String
  quizId String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  option Option[]
}
model Option {
  id String @id @default(uuid())
  option String
  isCorrect Boolean @default(false)
  questionId String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model ReadPlan {
  id String @id @default(uuid())
  title String
  duration Int
  description String?
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  readingShedules ReadingSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ReadingSchedule {
  id String @id @default(uuid())
  titleDay String
  bookId String
  book Book @relation(fields: [bookId], references: [id])
  readPlanId String
  referenceDay String
  readPlan ReadPlan @relation(fields: [readPlanId], references: [id], onDelete: Cascade)
  insightsRead InsightsRead[]
}
model InsightsRead {
  id String @id @default(uuid())
  isReaded Boolean @default(false)
  isFinished Boolean @default(false)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingSheduleId String
  readingShedule ReadingSchedule @relation(fields: [readingSheduleId], references: [id], onDelete: Cascade)
}


model ProofPurchase {
  id String @id @default(uuid())
  bookId String
  book Book @relation(fields: [bookId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  datePurchase DateTime
  methodPayment String? @default("Dinheiro")
  createdAt DateTime @default(now())
} // Relação de compra para validar se o livro foi comprado.